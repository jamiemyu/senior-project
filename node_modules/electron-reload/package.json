{
  "_args": [
    [
      {
        "raw": "electron-reload",
        "scope": null,
        "escapedName": "electron-reload",
        "name": "electron-reload",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jamieyu/Desktop/Coding/SeniorProjectApp"
    ]
  ],
  "_from": "electron-reload@latest",
  "_id": "electron-reload@1.2.2",
  "_inCache": true,
  "_location": "/electron-reload",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/electron-reload-1.2.2.tgz_1506586356462_0.9689564509317279"
  },
  "_npmUser": {
    "name": "yan-foto",
    "email": "yan.foto@quaintous.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "electron-reload",
    "scope": null,
    "escapedName": "electron-reload",
    "name": "electron-reload",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/electron-reload/-/electron-reload-1.2.2.tgz",
  "_shasum": "621ddb443b9fbba1c5e29a5fdd683322b5c42284",
  "_shrinkwrap": null,
  "_spec": "electron-reload",
  "_where": "/Users/jamieyu/Desktop/Coding/SeniorProjectApp",
  "author": {
    "name": "Yan Foto",
    "email": "yan.foto@quaintous.com"
  },
  "bugs": {
    "url": "https://github.com/yan-foto/electron-reload/issues"
  },
  "dependencies": {
    "chokidar": "^1.5.1"
  },
  "description": "Simplest way to reload an electron app on file changes!",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-dPZrcqjgFR3Gu5TOOVK3GQx63JcB2WJ0hki/4M5tlenDF7epFSnKkcAZyKYwUGEqk1TkUkUUOl7ZyzAK6QNuNQ==",
    "shasum": "621ddb443b9fbba1c5e29a5fdd683322b5c42284",
    "tarball": "https://registry.npmjs.org/electron-reload/-/electron-reload-1.2.2.tgz"
  },
  "gitHead": "4b0153f069cba3c8ceda2e19d94d6a5bf3a5e379",
  "homepage": "https://github.com/yan-foto/electron-reload#readme",
  "keywords": [
    "electron",
    "reload",
    "auto-reload",
    "node"
  ],
  "license": "MIT",
  "main": "main.js",
  "maintainers": [
    {
      "name": "yan-foto",
      "email": "yan.foto@quaintous.com"
    }
  ],
  "name": "electron-reload",
  "optionalDependencies": {},
  "readme": "# electron reload\nThis is (*hopefully*) the simplest way to load contents of all active [`BrowserWindow`s](https://github.com/atom/electron/blob/master/docs/api/browser-window.md) within electron when the source files are changed.\n\n[![Build Status](https://travis-ci.org/yan-foto/electron-reload.svg?branch=master)](https://travis-ci.org/yan-foto/electron-reload)\n[![neutron](https://img.shields.io/badge/neutron-compatible-004455.svg)](https://github.com/yan-foto/neutron)\n[![npm](https://img.shields.io/npm/v/electron-reload.svg)](https://www.npmjs.com/package/electron-reload)\n[![Code Climate](https://codeclimate.com/github/yan-foto/electron-reload/badges/gpa.svg)](https://codeclimate.com/github/yan-foto/electron-reload)\n![license](https://img.shields.io/npm/l/electron-reload.svg)\n\n**Disclaimer**: this module is in its very early stages and the logic is still not mature enough.\n\n# Installation\n```\nnpm install electron-reload\n```\n\n# Usage\nJust initialize this module with desired glob or file path to watch and let it refresh electron browser windows as targets are changed:\n\n```js\n'use strict';\n\nconst {app, BrowserWindow} = require('electron');\n\nrequire('electron-reload')(__dirname);\n\n// Standard stuff\napp.on('ready', () {\n  let mainWindow = new BrowserWindow({width: 800, height: 600});\n\n  mainWindow.loadUrl(`file://${__dirname}/index.html`);\n  // the rest...\n});\n```\n\nNote that the above code only refreshes `WebContent`s of all `BrowserWindow`s. So if you want to have a hard reset (starting a new electron process) you can just pass the path to the electron executable in the `options` object. For example if you already have electron pre-built installed you could just do\n\n```js\nrequire('electron-reload')(__dirname, {\n  electron: require('electron-prebuilt')\n});\n```\n\nYou could also use the (relatively) new [`electron`](https://www.npmjs.com/package/electron) package, *but* you should specify the path directly (no `require`!):\n\n```js\nconst path = require('path')\n\nrequire('electron-reload')(__dirname, {\n  electron: path.join(__dirname, 'node_modules', '.bin', 'electron')\n});\n```\n\nIf your app overrides some of the default `quit` or `close` actions (e.g. closing the last app window hides the window instead of quitting the app) then the default `electron-reload` hard restart could leave you with multiple instances of your app running. In these cases you can change the default hard restart action from `app.quit()` to `app.exit()` by specifying the hard reset method in the electron-reload options:\n\n```js\nconst path = require('path')\n\nrequire('electron-reload')(__dirname, {\n  electron: path.join(__dirname, 'node_modules', '.bin', 'electron'),\n  hardResetMethod: 'exit'\n});\n```\n\n# API\n`electron_reload(paths, options)`\n* `paths`: a file, directory or glob pattern to watch\n* `options` (optional): [`chokidar`](https://github.com/paulmillr/chokidar) options plus `electron` property pointing to electron executables. (default: `{ignored: /node_modules|[\\/\\\\]\\./}`)\n\n\n# Why this module?\nSimply put, I was tired and confused by all other available modules which are so complicated\\* for such an uncomplicated task!\n\n\\* *e.g. start a local HTTP server, publish change events through a WebSocket, etc.!*\n\n# Even more!\nIf you want to have least effort when developing electron packages, take a look at [neutron](https://github.com/yan-foto/neutron)!\n\n# Changelog\n - **1.2.2**: Fix `browserWindows[]` indexing\n - **1.2.1**: Remove logging from production code (d'oh)\n - **1.2.0**: Allow hard reset in multiple browser windows\n - **1.1.0**: Add `app.exit()` in addition to `app.quit()` for hard resets\n - **1.0.3**: Fix hard reset bug\n - **1.0.2**: Detach child so that killing parent doesn't kill it (on windows)\n - **1.0.1**: Replace `extend` with `Object.assign`\n - **1.0.0**: Adapt to Electron 1.0 new API\n - **0.3.0**: Use new method of accessing `app` (e.g. `require(electron).app`)\n - **0.2.0**: Use new electrons (> v0.32.3) `browser-window-created` event\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yan-foto/electron-reload.git"
  },
  "version": "1.2.2"
}
